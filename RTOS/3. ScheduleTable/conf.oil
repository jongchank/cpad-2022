CPU mySystem {
	
	OS myOs {
		EE_OPT = "DEBUG";
		
		USERESSCHEDULER = FALSE;
		
		CPU_DATA = AVR8{
			MULTI_STACK = FALSE;
		};
		
		MCU_DATA = MEGA{
			MODEL = MEGA_328p;
		};
        
		LIB = ARDUINO{
			SDK_BOARD = UNO;
			
			VARIANT = CC{
				VERSION = "1.8.16";
			};
			
			STAND_ALONE = TRUE;		// Generate arduino libraries
		};
		
		KERNEL_TYPE = OSEK{
			CLASS = ECC2;	// Default
		};
		
	};
	
	APPDATA myApp {
		APP_SRC = "bsw.cpp";
		APP_SRC = "asw.c";
		APP_SRC = "serial.cpp";
	};
	
	TASK TaskH {
		PRIORITY = 3;
		STACK = SHARED;
		SCHEDULE = FULL;
		AUTOSTART = FALSE;
        ACTIVATION = 1;
	};
	
	TASK TaskM {	
		PRIORITY = 2;	
		STACK = SHARED;
		SCHEDULE = FULL;
		AUTOSTART = FALSE;
        ACTIVATION = 1;
	};
	
	TASK TaskL {	
		PRIORITY = 1;	
		STACK = SHARED;
		SCHEDULE = FULL;
		AUTOSTART = FALSE;
        ACTIVATION = 1;
	};
	
	COUNTER counter1 {	//manual counter
        MINCYCLE = 1;
        MAXALLOWEDVALUE = 127;
        TICKSPERBASE = 1;
    };
/*  
    ALARM alarmH {
        COUNTER = counter1;
        ACTION = ACTIVATETASK
        {
            TASK = TaskH;
        };
        AUTOSTART = TRUE {
            ALARMTIME = 5;	// Release Time
            CYCLETIME = 5;	// Cycle Time
        };
    };
    
    ALARM alarmM {	
		COUNTER = counter1;
		ACTION = ACTIVATETASK
		{
			TASK = TaskM;		
		};
		AUTOSTART = TRUE {
			ALARMTIME = 5;	
			CYCLETIME = 10;	
		};	
    };
    
	ALARM alarmL {	
		COUNTER = counter1;
		ACTION = ACTIVATETASK
		{
			TASK = TaskL;		
		};
		AUTOSTART = TRUE {
			ALARMTIME = 5;	
			CYCLETIME = 15;	
		};	
    };
*/
	SCHEDULETABLE SchedTab1 {
		COUNTER = counter1;
		DURATION = 30;		// Schedule table cycle
		REPEATING = TRUE;	// Repeat option
		AUTOSTART = TRUE {
			START_VALUE = 5;	// Starting ticks
		};
		
		
		/* Write the expire points in the order that you want to execute it */
		EXPIRE_POINT = ACTION {
			EXPIRE_VALUE = 0;	// Release time in schedule table duration
			ACTION = ACTIVATETASK { TASK = TaskH; };
			ACTION = ACTIVATETASK { TASK = TaskM; };
			ACTION = ACTIVATETASK { TASK = TaskL; };
		};
		
		EXPIRE_POINT = ACTION {
			EXPIRE_VALUE = 5;
			ACTION = ACTIVATETASK { TASK = TaskH; };
		};
		EXPIRE_POINT = ACTION {
			EXPIRE_VALUE = 10;		
			ACTION = ACTIVATETASK { TASK = TaskH; };
			ACTION = ACTIVATETASK { TASK = TaskM; };
		};
		
		EXPIRE_POINT = ACTION {
			EXPIRE_VALUE = 15;
			ACTION = ACTIVATETASK { TASK = TaskH; };
			ACTION = ACTIVATETASK { TASK = TaskL; };
		};
		
		EXPIRE_POINT = ACTION {
			EXPIRE_VALUE = 20;
			ACTION = ACTIVATETASK { TASK = TaskH; };	
			ACTION = ACTIVATETASK { TASK = TaskM; };
		};
		
		EXPIRE_POINT = ACTION {
			EXPIRE_VALUE = 25;
			ACTION = ACTIVATETASK { TASK = TaskH; };	
		};
 	};

    ISR TimerISR {
		CATEGORY = 2;
		SOURCE = "TIMER1_COMPA"; /* TODO: Set correct ENTRY name. */
		/* PRIORITY = LOW; */	 /* FIXED HARDWARE PRIORITY */
	};
};